Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Ziya Momin

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such
documents include the course's lecture slides and precept handouts.

The man pages on the armlab cluster.

The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None

------------------------------------------------------------------------
In fulfillment of the requirement from section 2.4.3 of the Academic
Regulations in Princeton's Rights, Rules, Responsibilities guide,
enter your name in the space below the following affirmation:

This paper represents my own work in accordance with University
regulations.

Ziya Momin

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

I thought this assignment was very helpful in getting me comfortable
with debugging using tools like criTer and valgrind and also building
with make files to simplify the process of compiling code. This
assignment really solidified my understanding of utilizing these tools
to preperly and efficiently debug rather than just "guessing and
checking" like I may have done in past COS classes.
Moreover, while tedious, it was actually pretty fun trying to figure out
where my code went wrong and fixing it iteratively. 

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

No bugs.

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None.

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 64: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablelist.c: line 97: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablelist.c: line 180: medium priority:
   Do you want to validate 'pvExtra' through an assert?

I disagree with these warnings because the pvValue parameter is never
dereferenced, meaning there's no need to validate it through an assert.
Additionally, pvValue can legitimately be NULL. Similarly, pvExtra can
also be NULL because the function must handle both cases: when an extra
argument is needed and when no extra argument is required. To
accomodate this, we reserve a void * argument for pvExtra, using NULL
as a placeholder when no extra argument is necessary. Therefore, pvExtra 
will sometimes be NULL by design.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None.

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablehash.c: line 149: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 190: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 274: medium priority:
   Do you want to validate 'pvExtra' through an assert?

I disagree with these warnings because the pvValue parameter is never
dereferenced, meaning there's no need to validate it through an assert.
Additionally, pvValue can legitimately be NULL. Similarly, pvExtra can
also be NULL because the function must handle both cases: when an extra
argument is needed and when no extra argument is required. To
accomodate this, we reserve a void * argument for pvExtra, using NULL
as a placeholder when no extra argument is necessary. Therefore, pvExtra 
will sometimes be NULL by design.

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.001648 seconds.
-- 5000 bindings consumed 1.076774 seconds.
-- 50000 bindings consumed 108.693252 seconds.
-- 500000 bindings consumed more than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.008303 seconds.
-- 50000 bindings consumed 0.416639 seconds.
-- 500000 bindings consumed 76.910349 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.011334 seconds.
-- 50000 bindings consumed 0.119724 seconds.
-- 500000 bindings consumed 1.871879 seconds.
